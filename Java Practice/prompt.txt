Project Title: Java Console-Based Banking System

Project Description (Prompt):

Create a Java console-based banking system that supports multiple accounts and basic banking operations. The system should use object-oriented principles (classes, enums, arrays/lists) and handle invalid inputs gracefully using exception handling. The system will allow users to create accounts, perform transactions, and view account details.

Requirements & Features:

Main Menu (Console-Based Interaction)

Options:

Create an Account

Existing Customer Login

Display All Accounts

Exit

Input should be validated using try-catch blocks to handle invalid input.

Account Creation

Prompt user to enter:

Name

Initial Balance

Account Type (CURRENT / SAVINGS) → Use Enum

Interest rate (if SAVINGS)

Generate an account number automatically.

Store all account objects in an array or ArrayList to manage multiple accounts.

After creation, show a success message with account details.

Account Operations (Post-Login)

Operations menu for logged-in users:

Deposit

Withdraw

Check Account Details (name, account number, balance, type, interest)

Add Interest (if SAVINGS)

Exit

Account operations should be linked to account number.

Use Enum for operations as well: DEPOSIT, WITHDRAW, CHECK, EXIT.

Transaction Handling

Create a Transaction class to keep track of the last 5 transactions for each account.

Each transaction records:

Type (DEPOSIT / WITHDRAW)

Amount

Date/Time (optional)

When requested, display the last 5 transactions for the account.

Display All Accounts

When user chooses “Display All Accounts”, print details of all accounts stored in the array/ArrayList.

Exception Handling

Handle invalid menu choices using try-catch and throw statements.

Validate operations like:

Withdraw should not exceed balance.

Deposit should be a positive number.

Provide user-friendly error messages.

Design Considerations

Classes:

BankAccount → holds account details

Transaction → handles transactions per account

BankSystem → main class with menu and operations

Enums:

AccountType { CURRENT, SAVINGS }

Operation { DEPOSIT, WITHDRAW, CHECK, EXIT }

Data storage: Use ArrayList for accounts to support multiple accounts dynamically.

Modularize code: separate methods for deposit, withdraw, add interest, etc.

Implementation Steps (Suggested):

Define AccountType and Operation enums.

Create Transaction class with list of last 5 transactions.

Create BankAccount class with:

Fields: name, account number, balance, account type, interest rate, transaction list

Methods: deposit, withdraw, check details, add interest

Create BankSystem class with:

Main menu

ArrayList to store accounts

Methods for account creation, login, display all accounts

Exception handling for invalid inputs

Implement account operations for logged-in user using a loop until they exit.

Test with multiple accounts and transactions to ensure all features work correctly.

Extra Challenge (Optional):

Allow searching accounts by account number.

Include date and time for transactions.

Save account data to a file for persistence.